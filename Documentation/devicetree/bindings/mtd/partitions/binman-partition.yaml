# SPDX-License-Identifier: (GPL-2.0 OR BSD-2-Clause)
# Copyright 2023 Google LLC

%YAML 1.2
---
$id: http://devicetree.org/schemas/mtd/partitions/binman-partition.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Binman partition

maintainers:
  - Simon Glass <sjg@chromium.org>

description: |
  This corresponds to a binman 'entry'. It is a single partition which holds
  data of a defined type.

  The vendor is specified as binman since there are quite a number
  of binman-specific entry types, such as section, fill and files,
  to be added later.

allOf:
  - $ref: /schemas/mtd/partitions/partition.yaml#

properties:
  compatible:
    enum:
      - binman,entry # generic binman entry
      - u-boot       # u-boot.bin from U-Boot project
      - tfa-bl31     # bl31.bin or bl31.elf from TF-A project

  reg:
    minItems: 1
    maxItems: 2

  align:
    $ref: /schemas/types.yaml#/definitions/uint32
    minimum: 1
    maximum: 0x80000000
    multipleOf: 2
    description:
      This sets the alignment of the entry in bytes.

      The entry offset is adjusted so that the entry starts on an aligned
      boundary within the containing section or image. For example ‘align =
      <16>’ means that the entry will start on a 16-byte boundary. This may
      mean that padding is added before the entry. The padding is part of
      the containing section but is not included in the entry, meaning that
      an empty space may be created before the entry starts. Alignment
      must be a power of 2. If ‘align’ is not provided, no alignment is
      performed.

  align-size:
    $ref: /schemas/types.yaml#/definitions/uint32
    minimum: 1
    maximum: 0x80000000
    multipleOf: 2
    description:
      This sets the alignment of the entry size in bytes. It must be a power
      of 2.

      For example, to ensure that the size of an entry is a multiple of 64
      bytes, set this to 64. While this does not affect the contents of the
      entry within binman itself (the padding is performed only when its
      parent section is assembled), the end result is that the entry ends
      with the padding bytes, so may grow. If ‘align-size’ is not provided,
      no alignment is performed.

  align-end:
    $ref: /schemas/types.yaml#/definitions/uint32
    minimum: 1
    maximum: 0x80000000
    multipleOf: 2
    description:
      This sets the alignment (in bytes) of the end of an entry with respect
      to the containing section. It must be a power of 2.

      Some entries require that they end on an alignment boundary,
      regardless of where they start. This does not move the start of the
      entry, so the contents of the entry will still start at the beginning.
      But there may be padding at the end. While this does not affect the
      contents of the entry within binman itself (the padding is performed
      only when its parent section is assembled), the end result is that the
      entry ends with the padding bytes, so may grow. If ‘align-end’ is not
      provided, no alignment is performed.

additionalProperties: false

examples:
  - |
    partitions {
        compatible = "binman";
        #address-cells = <1>;
        #size-cells = <1>;

        partition@100000 {
            compatible = "u-boot";
            reg = <0x100000 0xf00000>;
            align-size = <0x1000>;
            align-end = <0x10000>;
        };

        partition@200000 {
            compatible = "tfa-bl31";
            reg = <0x200000 0x100000>;
            align = <0x4000>;
        };
    };
